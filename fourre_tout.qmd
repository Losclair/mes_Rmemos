---
title: "fourre_tout"
format: html
editor: visual
---

# **FOURRE TOUT**

```{r}
library(nycflights13)
library(tidyverse)
```

# PACKAGE DPLYR ou la transformation de données

## Rows

Les verbes les plus importants qui opèrent sur les lignes d'un ensemble de données sont `filter()`, qui modifie les lignes présentes sans changer leur ordre, et `arrange()`, qui modifie l'ordre des lignes sans changer celles qui sont présentes. Les deux fonctions n’affectent que les lignes et les colonnes restent inchangées. Nous discuterons également de `distinct()`qui trouve des lignes avec des valeurs uniques mais différentes ainsi que de `arrange()` et `filter()`qui peuvent éventuellement modifier les colonnes.

### filter()

Le premier argument est la trame de données. Le deuxième argument et les suivants sont les conditions qui doivent être vraies pour conserver la ligne. Par exemple, nous pourrions trouver tous les vols qui partent avec plus de 120 minutes (deux heures) de retard :

```{r}
flights |> 
  filter(dep_delay > 120)
```

```{r}
flights |> 
  filter(month == 1 & day == 1)
```

```{r}
flights |> 
  filter(month == 1 | month == 2)
```

**Equivalent à : flights \|\>\
filter(month %in% c(1, 2))**

### arrange()

Effectue un tri des colonnes passées en arguments.

```{r}
flights |> 
  arrange(year, month, day, dep_time)
flights |> 
  arrange(desc(dep_delay))
```

### distinct()

Trouve toutes les lignes uniques d'un ensemble de données.

```{r}
flights |> 
  distinct(origin, dest, .keep_all = TRUE)
```

Si vous souhaitez plutôt trouver le nombre d'occurrences, il est préférable d'utiliser `count()`au lieu de `distinct()`, et avec `sort = TRUE`.

```{r}
flights |>
  count(origin, dest, sort = TRUE)
```

## Columns

### Mutate

Ajoute de nouvelles colonnes calculées à partir des colonnes existantes.

```{r}
gain_speed <- flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60)
```

La fonction mutate possède plusieurs paramètres utiles :\
- .before = nom de colonne (place la nouvelle colonne avant "nom de colonne")\
- .after = nom de colonne (place la nouvelle colonne après "nom de colonne") - .keep = "used" (ne garde que les nouvelles colonnes et celles qui ont été utilisées)

### Select

Sélectionnez les colonnes par nom :

```{r}
flights |> 
  select(year, month, day)
```

Sélectionnez toutes les colonnes entre l'année et le jour (inclus) :

```{r}
flights |> 
  select(year:day)
```

Sélectionnez toutes les colonnes sauf celles entre l'année et le jour (inclus) :

```{r}
flights |> 
  select(!year:day)
```

Sélectionnez toutes les colonnes contenant des caractères :

```{r}
flights |> 
  select(where(is.character))
```

Il existe un certain nombre de fonctions d'assistance que vous pouvez utiliser dansselect() :\
- starts_with("abc"): correspond aux noms commençant par « abc ».\
- ends_with("xyz"): correspond aux noms qui se terminent par « xyz ».\
- contains("ijk"): correspond aux noms qui contiennent « ijk ».\
- num_range("x", 1:3): correspond à x1, x2et x3.\
Voir `?select` pour plus de détails, vous pourrez également utiliser `matches()` pour sélectionner des variables qui correspondent à un modèle.

Vous pouvez aussi avec `select()` renommer les variables comme vous le souhaitez en utilisant le signe `=`. Par exemple `flights |> select(tail_num = tailnum)`.

```{r}
flights |> select(annee = year, mois = month, jour = day)
```

### Rename

Vous pouvez utiliser `rename()`à la place de `select()` si vous n'avez que peu de colonnes à renommer.

```{r}
flights |> rename(annee = year, mois = month, jour = day)
```

En fait je vois pas du tout la différence... Si vous avez un tas de colonnes nommées de manière incohérente et qu'il serait pénible de toutes les corriger à la main, consultez `janitor::clean_names()`ce qui fournit un nettoyage automatisé utile.

### Relocate

Utilisez `relocate()` pour déplacer les variables. Vous souhaiterez peut-être rassembler les variables associées ou déplacer les variables importantes au premier plan. Par défaut, `relocate()` déplace les variables vers l'avant.

```{r}
flights |> 
  relocate(time_hour, air_time)
```

Vous pouvez aussi utiliser `.before` et `.after` pour déterminer leur emplacement précisément.

## Le pipe

Nous vous avons montré des exemples simples du tube ci-dessus, mais son véritable pouvoir apparaît lorsque vous commencez à combiner plusieurs verbes. Par exemple, imaginez que vous vouliez rechercher les vols rapides vers l'aéroport IAH de Houston : vous devez combiner filter(), mutate(), select()et arrange():

```{r}
flights |> 
  filter(dest == "IAH") |> 
  mutate(speed = distance / air_time * 60) |> 
  select(year:day, dep_time, carrier, flight, speed) |> 
  arrange(desc(speed))
```

Le même résultat peut être obtenu avec une inclusion des différentes fonctions dans des parenthèses impliquées, ou en effectuant chaque fonction ligne par ligne en stockant les résutats dans dans variables intermédiaires.\
L'utilisation du pipe permet une lecture plus claire du code.\
A noter que \|\> est équivalent à %\>%, mais nous préférons l'utiliser car %\>% n'est disponible qu'avec moins de package.

## Les groupes

Les plus importantes sont `group_by()`, `summarize()` et la famille de fonctions `slice`.

### Group_by

Groupe les données suivant une colonne, les opérations effectuées ensuites se font selon se regroupement.

### Summarize

L'opération groupée la plus importante est un résumé qui, s'il est utilisé pour calculer une seule statistique récapitulative, réduit le bloc de données à une seule ligne pour chaque groupe. Dans dplyr, cette opération est effectuée par summarize()3 , comme le montre l'exemple suivant, qui calcule le retard de départ moyen par mois

```{r}
flights |> 
  group_by(month) |> 
  summarize(
    avg_delay = mean(dep_delay, na.rm = TRUE) # sinon les NA prennent le pas
  )
```

un résumé très utile est n(), qui renvoie le nombre de lignes dans chaque groupe :

```{r}
flights |> 
  group_by(month) |> 
  summarize(
    avg_delay = mean(dep_delay, na.rm = TRUE), 
    n = n()
  )
```

### Les slice_fonctions

Il existe cinq fonctions pratiques qui vous permettent d'extraire des lignes spécifiques au sein de chaque groupe :

df \|\> slice_head(n = 1)prend la première rangée de chaque groupe. df \|\> slice_tail(n = 1)prend la dernière rangée de chaque groupe. df \|\> slice_min(x, n = 1)prend la ligne avec la plus petite valeur de la colonne x. df \|\> slice_max(x, n = 1)prend la ligne avec la plus grande valeur de la colonne x. df \|\> slice_sample(n = 1)prend une ligne aléatoire. Vous pouvez varier npour sélectionner plus d'une ligne, ou au lieu de n =, vous pouvez utiliser prop = 0.1pour sélectionner (par exemple) 10 % des lignes de chaque groupe.

```{r}
flights |> 
  group_by(dest) |> 
  slice_max(arr_delay, n = 1, with_ties = FALSE) |> # sans white_ties les valeurs identiques sont masquéées
  relocate(dest)
```

### Regroupement par plusieurs variables

Vous pouvez créer des groupes en utilisant plusieurs variables.

```{r}
daily <- flights |>  
  group_by(year, month, day)
daily
```

```{r}
daily_flights <- daily |> 
  summarize(n = n(),
  .groups = "drop_last")
daily_flights
```

### Dissociation

Avec `ungroup()`.

### By

Fonction expérimentale proche de .groups, avec possibilié de regroupement sur plusieurs variables (ex: .by = c(origin, dest)). By ne provoque pas de message et apparemment ne necessite l'utilisation de ungroup().

### Exercices

Déterminer les pires associations aéroport de destination/transporteur en terme de retard moyen. Pour mémoire aéroport = dest, transporteur = carrier et retard = arr_delay.

```{r}
ex1 <- flights |>
  group_by(arr_delay, dest, carrier) |>
  arrange(desc(arr_delay))
ex1
```

```{r}
t1 <- flights |> 
  filter(arr_delay > 0) |>
  group_by(carrier) |>
  summarise(n = n()) |>
  arrange(desc(n))
ggplot(t1, aes(x = carrier, y = n, fill = n)) + geom_col()
```

# Flux de travail : style de code
